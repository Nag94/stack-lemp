# YAML anchors
shared:

  # Task : sync and merge with rsync 2 rep. Used to merge stack and config
  - &merge-stack-and-config
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: cycloid/cycloid-toolkit
        tag: latest
    run:
      path: /usr/bin/merge-stack-and-config
    outputs:
    - name: merged-stack
      path: "merged-stack"

  # Task : connect on the bastion server and run ansible from it
  - &run-ansible-from-bastion
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cycloid/cycloid-toolkit
          tag: v2.7
      run:
        path: /usr/bin/ansible-runner
      caches:
        - path: ansible-playbook/roles
      inputs:
      - name: merged-stack
        path: ansible-playbook

  - &aws-ami-cleaner
    task: aws-ami-cleaner
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cycloid/cycloid-toolkit
          tag: v2.7
      run:
        path: /usr/bin/aws-ami-cleaner
      params:
        AWS_ACCESS_KEY_ID: ((aws_access_key))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_key))
        AWS_DEFAULT_REGION: ((aws_default_region))
        KEEP: 3
        AWS_NAME_PATTERNS: >
                  [
                    "((customer))_((project))_front_((env))"
                  ]

groups:

- name: overview
  jobs:
  - application-deployment
  - terraform-plan
  - terraform-apply
  - build-ami-front
  - build-application
  - unittests
  - functional-tests
- name: application
  jobs:
  - application-deployment
  - build-application
  - unittests
  - functional-tests

- name: infra
  jobs:
  - terraform-plan
  - terraform-apply
  - build-ami-front

- name: destroy
  jobs:
  - terraform-destroy

resource_types:

- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

- name: packer
  type: docker-image
  source:
    repository: jdub/packer-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

resources:

- name: tfstate
  type: terraform
  source:
    storage:
      bucket: ((terraform_storage_bucket_name))
      bucket_path: ((terraform_storage_bucket_path))
      region_name: ((aws_default_region))
      access_key_id: ((aws_access_key))
      secret_access_key: ((aws_secret_key))
    vars:
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
      env: ((env))
      project: ((project))
      customer: ((customer))
      aws_region: ((aws_default_region))
      rds_password: ((rds_password))
      deploy_bucket_name: ((deploy_bucket_name))
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_DEFAULT_REGION: ((aws_default_region))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))

# The Terraform stack (will be merged with the config)
- name: git_stack-terraform
  type: git
  source:
    uri: https://github.com/cycloid-community-catalog/stack-lemp
    branch: ((stack_git_branch))
    paths:
      - terraform/*

# The Terraform config (will be merged with the stack)
- name: git_config-terraform
  type: git
  source:
    uri: ((config_git_repository))
    branch: ((config_git_branch))
    private_key: ((config_git_private_key))
    paths:
      - ((config_terraform_path))/*

# The Ansible stack (will be merged with the config)
- name: git_stack-ansible
  type: git
  source:
    uri: https://github.com/cycloid-community-catalog/stack-lemp
    branch: ((stack_git_branch))
    paths:
      - ansible/*

# The Ansible config (will be merged with the stack)
- name: git_config-ansible
  type: git
  source:
    uri: ((config_git_repository))
    branch: ((config_git_branch))
    private_key: ((config_git_private_key))
    paths:
      - ((config_ansible_path))/((env))-*

#
# application
#
- name: git_app-code
  type: git
  source:
    uri: ((lemp_git_repository))
    branch: ((lemp_git_branch))
    private_key: ((lemp_git_private_key))

- name: s3_app-release
  type: s3
  source:
    bucket: ((deploy_bucket_name))
    versioned_file: ((deploy_bucket_object_path))
    private: true
    region_name: ((aws_default_region))
    access_key_id: ((aws_access_key))
    secret_access_key: ((aws_secret_key))
    skip_download: true

# The AMI builder for the front servers (for ASG scale-up)
- name: ami_front
  type: packer
  source:
    aws_access_key_id: ((aws_access_key))
    aws_secret_access_key: ((aws_secret_key))
    region: ((aws_default_region))

jobs:

# Build a new AMI whenever there is a change in Ansible
- name: build-ami-front
  serial: True
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
  - do:
    - get: git_stack-ansible
      trigger: true
    - get: git_config-ansible
      trigger: true

    - task: merge-stack-and-config
      config:
        <<: *merge-stack-and-config
        inputs:
        - name: git_config-ansible
          path: "config"
        - name: git_stack-ansible
          path: "stack"
      params:
        CONFIG_PATH: ((config_ansible_path))
        STACK_PATH: ansible
        EXTRA_ANSIBLE_VARS:
          deploy_bucket_object_path: ((deploy_bucket_object_path))
          deploy_bucket_name: ((deploy_bucket_name))
          aws_default_region: ((aws_default_region))

    - put: ami_front
      params:
        inventory_groups: tag_role_front,tag_project_((project)),tag_env_((env))
        env: ((env))
        customer: ((customer))
        project: ((project))
        role: front
        public_key: ((debug_public_key))
        vault_password: ((ansible_vault_password))
        skip_tags: deploy,notforbuild
        template: merged-stack/packer/front/packer_template.json
        var_file: merged-stack/packer/front/secrets.json
        aws_access_key_id: ((aws_admin.access_key))
        aws_secret_access_key: ((aws_admin.secret_key))
        aws_region: ((aws_default_region))
        ansible_version: ((packer_ansible_version))

# Merge and trigger a plan whenever there is a commit in Terraform stack or config
- name: terraform-plan
  serial: True
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
    - do:
      - get: git_stack-terraform
        trigger: true
      - get: git_config-terraform
        trigger: true
      - get: ami_front
        passed: [build-ami-front]
        trigger: true

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: terraform

      - put: tfstate
        params:
          env_name: ((project))-((env))
          plan_only: true
          terraform_source: merged-stack/

# Merge and trigger an apply manually (no autostart of this job)
- name: terraform-apply
  serial: True
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
    - do:
      - get: git_stack-terraform
        trigger: false
        passed:
          - terraform-plan
      - get: git_config-terraform
        trigger: false
        passed:
          - terraform-plan
      - get: tfstate
        trigger: false
        passed:
          - terraform-plan

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config-terraform
            path: "config"
          - name: git_stack-terraform
            path: "stack"
        params:
          CONFIG_PATH: ((config_terraform_path))
          STACK_PATH: terraform

      - put: tfstate
        params:
          env_name: ((project))-((env))
          run_plan: true
          terraform_source: merged-stack/

      - *aws-ami-cleaner

- name: terraform-destroy
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
    - do:
        - get: git_stack-terraform
          trigger: false
        - get: git_config-terraform
          trigger: false
        - task: merge-stack-and-config
          config:
            <<: *merge-stack-and-config
            inputs:
            - name: git_config-terraform
              path: "config"
            - name: git_stack-terraform
              path: "stack"
          params:
            CONFIG_PATH: ((config_terraform_path))
            STACK_PATH: terraform

        - put: tfstate
          params:
            action: destroy
            env_name: ((project))-((env))
            terraform_source: merged-stack/
          get_params:
            action: destroy

########################################################################### Code

# Generate the release whenever there is a commit on the code
- name: build-application
  max_in_flight: 1
  serial: True
  build_logs_to_retain: 10
  plan:
  - do:
    - get: git_app-code
      params: {depth: 1}
      trigger: true

    - task: build-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: cycloid/busybox
            tag: latest
        run:
          path: /bin/bash
          args:
          - -xec
          - |
            DIR=${PWD}

            echo "### Build release"
            cd ${DIR}/code

            # make action/build if needed

            # Generate config file if needed

            # By default the following env variables are available on the ec2 instances
            #
            # RDS_ADDRESS: database host
            # RDS_PORT: database port
            # RDS_DATABASE: database name
            # RDS_USERNAME: database root user
            # S3_MEDIAS: media bucket name
            # ELASTICACHE_ADDRESS: cache host

            # wordpress example to use env variable and password
            #cat ./wp-config-sample.php | sed "s/define( 'DB_NAME.*/define( 'DB_NAME', getenv('RDS_DATABASE'));/;
            #                                 s/define( 'DB_USER.*/define( 'DB_USER', getenv('RDS_USERNAME'));/;
            #                                 s/password_here/${rds_password}/;
            #                                 s/define( 'DB_HOST.*/define( 'DB_HOST', getenv('RDS_ADDRESS'));/" > wp-config.php

            # Update a dedicated healthcheck page if needed
            echo '<?php echo "ok"; ?>' > healthcheck.php

            # create the archive release
            tar --exclude .git -zcf ${DIR}/release/s3_app-release.tar.gz .
        params:
          rds_password: ((rds_password))
          env: ((env))
        # caches:
        inputs:
        - name: git_app-code
          path: code
        outputs:
        - name: release
    - put: s3_app-release
      params:
        acl: private
        file: release/s3_app-release.tar.gz

- name: unittests
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
  - do:
    - get: s3_app-release
      trigger: true
      passed: [build-application]
    - get: git_app-code
      passed: [build-application]
      trigger: false

    - task: run
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: cycloid/busybox
            tag: latest
        run:
          path: /bin/bash
          args:
          - -xec
          - |
            DIR=${PWD}
            echo "Dummy tests OK"


#
# Front deploy
#

- name: application-deployment
  serial: True
  build_logs_to_retain: 10
  plan:
  - do:
    - get: git_stack-ansible
      trigger: false

    - get: git_config-ansible
      trigger: false

    - get: s3_app-release
      trigger: true
      passed:
        - unittests


    - get: tfstate
      trigger: false
      passed:
        - terraform-apply

    - get: git_app-code
      trigger: false
      passed: [unittests]

    - task: merge-stack-and-config
      config:
        <<: *merge-stack-and-config
        inputs:
        - name: git_config-ansible
          path: "config"
        - name: git_stack-ansible
          path: "stack"
        - name: tfstate
          path: "terraform"
      params:
        CONFIG_PATH: ((config_ansible_path))
        STACK_PATH: ansible

    - task: run-ansible
      <<: *run-ansible-from-bastion
      params:
        SSH_JUMP_URL: ((bastion_url))
        SSH_PRIVATE_KEY: ((bastion_private_key_pair))
        ANSIBLE_VAULT_PASSWORD: ((ansible_vault_password))
        AWS_DEFAULT_REGION: ((aws_default_region))
        AWS_ACCESS_KEY_ID: ((aws_access_key))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_key))
        ANSIBLE_PLAYBOOK_PATH: ansible-playbook
        ANSIBLE_PLAYBOOK_NAME: lemp.yml
        DEPLOY_BUCKET_NAME: ((deploy_bucket_name))
        DEPLOY_BUCKET_OBJECT_PATH: ((deploy_bucket_object_path))
        DEPLOY_BUCKET_REGION: ((aws_default_region))
        ANSIBLE_FORCE_GALAXY: false
#        EXTRA_VARS:
        EXTRA_ANSIBLE_VARS:
          customer: ((customer))
          project: ((project))
          env: ((env))
          default_ec2_region: ((aws_default_region))
          aws_default_region: ((aws_default_region))
          deploy_bucket_object_path: ((deploy_bucket_object_path))
          deploy_bucket_name: ((deploy_bucket_name))
        TAGS:
          - deploy

- name: functional-tests
  max_in_flight: 1
  build_logs_to_retain: 10
  plan:
  - do:
    - get: s3_app-release
      trigger: true
      passed: [application-deployment]
    - get: git_app-code
      passed: [application-deployment]
      trigger: false


    - task: run
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: cycloid/busybox
            tag: latest
        run:
          path: /bin/bash
          args:
          - -xec
          - |
            DIR=${PWD}
            echo "Dummy functional tests OK"
